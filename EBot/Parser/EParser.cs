/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 3.4.0.0
 */
using System.Collections.Generic;
using Hime.Redist;
using Hime.Redist.Parsers;

namespace E
{
	/// <summary>
	/// Represents a parser
	/// </summary>
	internal class EParser : LRkParser
	{
		/// <summary>
		/// The automaton for this parser
		/// </summary>
		private static readonly LRkAutomaton commonAutomaton = LRkAutomaton.Find(typeof(EParser), "EParser.bin");
		/// <summary>
		/// Contains the constant IDs for the variables and virtuals in this parser
		/// </summary>
		public class ID
		{
			/// <summary>
			/// The unique identifier for variable time
			/// </summary>
			public const int VariableTime = 0x001C;
			/// <summary>
			/// The unique identifier for variable atrange
			/// </summary>
			public const int VariableAtrange = 0x001D;
			/// <summary>
			/// The unique identifier for variable at
			/// </summary>
			public const int VariableAt = 0x001E;
			/// <summary>
			/// The unique identifier for variable nrange
			/// </summary>
			public const int VariableNrange = 0x001F;
			/// <summary>
			/// The unique identifier for variable nminutes
			/// </summary>
			public const int VariableNminutes = 0x0020;
			/// <summary>
			/// The unique identifier for variable nhours
			/// </summary>
			public const int VariableNhours = 0x0021;
			/// <summary>
			/// The unique identifier for variable n
			/// </summary>
			public const int VariableN = 0x0022;
			/// <summary>
			/// The unique identifier for variable a
			/// </summary>
			public const int VariableA = 0x0023;
			/// <summary>
			/// The unique identifier for variable in
			/// </summary>
			public const int VariableIn = 0x0024;
			/// <summary>
			/// The unique identifier for variable soon
			/// </summary>
			public const int VariableSoon = 0x0025;
			/// <summary>
			/// The unique identifier for variable soonish
			/// </summary>
			public const int VariableSoonish = 0x0026;
			/// <summary>
			/// The unique identifier for variable now
			/// </summary>
			public const int VariableNow = 0x0027;
			/// <summary>
			/// The unique identifier for variable tonight
			/// </summary>
			public const int VariableTonight = 0x0028;
			/// <summary>
			/// The unique identifier for variable prompt
			/// </summary>
			public const int VariablePrompt = 0x0029;
		}
		/// <summary>
		/// The collection of variables matched by this parser
		/// </summary>
		/// <remarks>
		/// The variables are in an order consistent with the automaton,
		/// so that variable indices in the automaton can be used to retrieve the variables in this table
		/// </remarks>
		private static readonly Symbol[] variables = {
			new Symbol(0x001C, "time"), 
			new Symbol(0x001D, "atrange"), 
			new Symbol(0x001E, "at"), 
			new Symbol(0x001F, "nrange"), 
			new Symbol(0x0020, "nminutes"), 
			new Symbol(0x0021, "nhours"), 
			new Symbol(0x0022, "n"), 
			new Symbol(0x0023, "a"), 
			new Symbol(0x0024, "in"), 
			new Symbol(0x0025, "soon"), 
			new Symbol(0x0026, "soonish"), 
			new Symbol(0x0027, "now"), 
			new Symbol(0x0028, "tonight"), 
			new Symbol(0x0029, "prompt"), 
			new Symbol(0x003D, "__VAxiom") };
		/// <summary>
		/// The collection of virtuals matched by this parser
		/// </summary>
		/// <remarks>
		/// The virtuals are in an order consistent with the automaton,
		/// so that virtual indices in the automaton can be used to retrieve the virtuals in this table
		/// </remarks>
		private static readonly Symbol[] virtuals = {
 };
		/// <summary>
		/// Initializes a new instance of the parser
		/// </summary>
		/// <param name="lexer">The input lexer</param>
		public EParser(ELexer lexer) : base (commonAutomaton, variables, virtuals, null, lexer) { }

		/// <summary>
		/// Visitor interface
		/// </summary>
		public class Visitor
		{
			public virtual void OnTerminalWhiteSpace(ASTNode node) {}
			public virtual void OnTerminalSeparator(ASTNode node) {}
			public virtual void OnTerminalE(ASTNode node) {}
			public virtual void OnTerminalDigit(ASTNode node) {}
			public virtual void OnTerminalNonzero(ASTNode node) {}
			public virtual void OnTerminalInteger(ASTNode node) {}
			public virtual void OnTerminalHour(ASTNode node) {}
			public virtual void OnTerminalMinute(ASTNode node) {}
			public virtual void OnTerminalYfinal(ASTNode node) {}
			public virtual void OnTerminalNumber(ASTNode node) {}
			public virtual void OnTerminalTexttime(ASTNode node) {}
			public virtual void OnTerminalN(ASTNode node) {}
			public virtual void OnTerminalAtOrBefore(ASTNode node) {}
			public virtual void OnTerminalWithin(ASTNode node) {}
			public virtual void OnTerminalIn(ASTNode node) {}
			public virtual void OnTerminalLike(ASTNode node) {}
			public virtual void OnTerminalEventually(ASTNode node) {}
			public virtual void OnTerminalTonight(ASTNode node) {}
			public virtual void OnTerminalSoon(ASTNode node) {}
			public virtual void OnTerminalSoonish(ASTNode node) {}
			public virtual void OnTerminalMin(ASTNode node) {}
			public virtual void OnTerminalMins(ASTNode node) {}
			public virtual void OnTerminalAminute(ASTNode node) {}
			public virtual void OnTerminalAnhour(ASTNode node) {}
			public virtual void OnTerminalRange(ASTNode node) {}
			public virtual void OnVariableTime(ASTNode node) {}
			public virtual void OnVariableAtrange(ASTNode node) {}
			public virtual void OnVariableAt(ASTNode node) {}
			public virtual void OnVariableNrange(ASTNode node) {}
			public virtual void OnVariableNminutes(ASTNode node) {}
			public virtual void OnVariableNhours(ASTNode node) {}
			public virtual void OnVariableN(ASTNode node) {}
			public virtual void OnVariableA(ASTNode node) {}
			public virtual void OnVariableIn(ASTNode node) {}
			public virtual void OnVariableSoon(ASTNode node) {}
			public virtual void OnVariableSoonish(ASTNode node) {}
			public virtual void OnVariableNow(ASTNode node) {}
			public virtual void OnVariableTonight(ASTNode node) {}
			public virtual void OnVariablePrompt(ASTNode node) {}
		}

		/// <summary>
		/// Walk the AST using a visitor
		/// </summary>
		public static void Visit(ParseResult result, Visitor visitor)
		{
			VisitASTNode(result.Root, visitor);
		}

		/// <summary>
		/// Walk the AST using a visitor
		/// </summary>
		public static void VisitASTNode(ASTNode node, Visitor visitor)
		{
			for (int i = 0; i < node.Children.Count; i++)
				VisitASTNode(node.Children[i], visitor);
			switch(node.Symbol.ID)
			{
				case 0x0003: visitor.OnTerminalWhiteSpace(node); break;
				case 0x0004: visitor.OnTerminalSeparator(node); break;
				case 0x0005: visitor.OnTerminalE(node); break;
				case 0x0006: visitor.OnTerminalDigit(node); break;
				case 0x0007: visitor.OnTerminalNonzero(node); break;
				case 0x0008: visitor.OnTerminalInteger(node); break;
				case 0x0009: visitor.OnTerminalHour(node); break;
				case 0x000A: visitor.OnTerminalMinute(node); break;
				case 0x000B: visitor.OnTerminalYfinal(node); break;
				case 0x000C: visitor.OnTerminalNumber(node); break;
				case 0x000D: visitor.OnTerminalTexttime(node); break;
				case 0x000E: visitor.OnTerminalN(node); break;
				case 0x000F: visitor.OnTerminalAtOrBefore(node); break;
				case 0x0010: visitor.OnTerminalWithin(node); break;
				case 0x0011: visitor.OnTerminalIn(node); break;
				case 0x0012: visitor.OnTerminalLike(node); break;
				case 0x0013: visitor.OnTerminalEventually(node); break;
				case 0x0014: visitor.OnTerminalTonight(node); break;
				case 0x0015: visitor.OnTerminalSoon(node); break;
				case 0x0016: visitor.OnTerminalSoonish(node); break;
				case 0x0017: visitor.OnTerminalMin(node); break;
				case 0x0018: visitor.OnTerminalMins(node); break;
				case 0x0019: visitor.OnTerminalAminute(node); break;
				case 0x001A: visitor.OnTerminalAnhour(node); break;
				case 0x001B: visitor.OnTerminalRange(node); break;
				case 0x001C: visitor.OnVariableTime(node); break;
				case 0x001D: visitor.OnVariableAtrange(node); break;
				case 0x001E: visitor.OnVariableAt(node); break;
				case 0x001F: visitor.OnVariableNrange(node); break;
				case 0x0020: visitor.OnVariableNminutes(node); break;
				case 0x0021: visitor.OnVariableNhours(node); break;
				case 0x0022: visitor.OnVariableN(node); break;
				case 0x0023: visitor.OnVariableA(node); break;
				case 0x0024: visitor.OnVariableIn(node); break;
				case 0x0025: visitor.OnVariableSoon(node); break;
				case 0x0026: visitor.OnVariableSoonish(node); break;
				case 0x0027: visitor.OnVariableNow(node); break;
				case 0x0028: visitor.OnVariableTonight(node); break;
				case 0x0029: visitor.OnVariablePrompt(node); break;
			}
		}
	}
}
